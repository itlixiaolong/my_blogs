(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{408:function(e,t,s){"use strict";s.r(t);var i=s(17),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"常见git报错及解决办法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见git报错及解决办法"}},[e._v("#")]),e._v(" 📗 常见git报错及解决办法")]),e._v(" "),t("h2",{attrs:{id:"_1-问题一-git-pull-failed-you-have-not-concluded-your-merge-exiting-because-of-unfinished-merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-问题一-git-pull-failed-you-have-not-concluded-your-merge-exiting-because-of-unfinished-merge"}},[e._v("#")]),e._v(" 📎 1.问题一：Git Pull Failed:You have not concluded your merge.Exiting because of unfinished merge")]),e._v(" "),t("p",[e._v("在拉取远程代码时，出现这样的情况，"),t("code",[e._v("Git Pull Failed:You have not concluded your merge.Exiting because of unfinished merge。")]),e._v("出现这种情况的原因如系统提示，可能在pull代码之前merge合并失败。\n在解决这个问题之前，先看看需要了解的知识。")]),e._v(" "),t("ul",[t("li",[e._v("git fetch命令")])]),e._v(" "),t("blockquote",[t("p",[e._v("用于从另一个存储库下载对象和引用。远程跟踪已更新分支（git术语叫commit），需要将这些更新取回本地，这时就要用到git fetch命令。\n语法：git fetch <远程主机名>。例如：git fetch orgin master，表示取回origin主机的master分支。更新所有分支，命令可以简写为git fetch。")])]),e._v(" "),t("ul",[t("li",[e._v("git pull命令")])]),e._v(" "),t("blockquote",[t("p",[e._v("用于取回远程主机某个分支的更新，再与本地的指定分支合并。这时你可能已经真正明白为什么会出现拉取失败的原因了，原因就在于拉取之后的代码合并失败造成的。")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("语法：git pull <远程主机名><远程分支名>:<本地分支名>。\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote",[t("p",[e._v("例如：git pull origin next:master => 表示取回origin主机的next分支，与本地的master分支合并。如果远程分支（next）要与当前分支合并，则冒号后面的部分可以省略。")])]),e._v(" "),t("ul",[t("li",[e._v("git reset命令")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("语法：git reset [- -hard|soft|mixed|merge|keep][<commit id>或HEAD]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("blockquote",[t("p",[e._v("将当前的分支重新设置到指定的commit id或者HEAD，其中HEAD是默认路径。其中hard、soft、mixed、merge、keep是设置的模式。通常使用- -hard，表示自commit id以来，工作目录中的任何改变都被丢弃，并把HEAD指向commit id。")])]),e._v(" "),t("h2",{attrs:{id:"解决方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方法"}},[e._v("#")]),e._v(" 📎 解决方法")]),e._v(" "),t("ul",[t("li",[e._v("方法一：")])]),e._v(" "),t("p",[e._v("舍弃本地代码，远程版本覆盖本地版本\n使用这种方法之前，可以先将本地修改的代码备份一下，避免重敲代码。具体命令如下：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git fetch --all\ngit reset --hard origin/master\ngit pull\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("ul",[t("li",[e._v("方法二：")])]),e._v(" "),t("p",[e._v("保留本地代码，中止合并–>重新合并–>重新拉取")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("git merge --abort\ngit reset --merge\ngit pull\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("这种做法需要处理代码冲突，因此以上两种做法，根据你的需要，选择合适的解决办法。")])])}),[],!1,null,null,null);t.default=a.exports}}]);